<%
if defined?(model_name)
  model = model_name.constantize
elsif defined?(objform)
  model = objform[0..(objform.index('/')-1)].singularize.camelize.constantize
end

if !defined?(allow_existing_edit)
  allow_existing_edit = true
end

if !defined?(allow_clear)
  allow_clear = false
end

# This could be either that it's an object from the database, or a temporary object representing input fields
existingobj_exists = defined?(existingobj) && !existingobj.nil?

# In addition, this checks if it's an object from the database
existingobj_exists_permanent = existingobj_exists && !existingobj.id.nil?

Rails.logger.debug{"select_or_create context: #{f.object_name}[#{name}], model: #{model}"}

# Set some defaults
if !defined?(partial_render)
  partial_render = false
end
if !defined?(expanded_if_nil)
  expanded_if_nil = partial_render
end
if !defined?(collapsed)
  if !existingobj_exists
    collapsed = !expanded_if_nil
  else
    collapsed = false
  end
end
if !defined?(create_new)
  create_new = true
end
if !defined?(allow_new)
  allow_new = true
end
if !defined?(only_new)
  only_new = false
end
if !defined?(simpleform)
  simpleform = nil
end
if !defined?(always_search)
  always_search = false
end
if !defined?(itemsPerPage)
  itemsPerPage = ""
  if always_search
    itemsPerPage = 10
  end
end
if !defined?(existingitems)
  existingitems = nil
end
if !defined?(force_existing)
  force_existing = false
end
if !defined?(existingcollapsed)
  # By default, expand the existing section only if an existing object is already selected.
  # The reason is that some users were confused when first using the app by the existing section being
  # expanded because they expected to be able to enter a new item
  existingcollapsed = !existingobj_exists_permanent && !force_existing
end
if !defined?(noresultsfunc)
  noresultsfunc = "null"
end
if !defined?(show_new_collapsible)
  show_new_collapsible = true
end

random_name = SecureRandom.hex(10)
new_item_collapsible_id = random_name + "_new_item"

# If the existing section is expanded, and no existing object is set, then collapse the existing section if there's
# nothing to choose from
if !existingcollapsed && !existingobj_exists_permanent && model.new.respond_to?("identity_id")
  if model.send("where", identity_id: current_user.current_identity_id).count == 0
    existingcollapsed = true
  end
end

# Finally, if the existingobj was nil coming in, then create a brand new one for the form
if !existingobj_exists
  existingobj = Myp.new_model(model)
elsif !existingcollapsed && !existingobj_exists_permanent
  # If the existing section is force-expanded, there's no selected permanent object, and
  # the other attributes evaluate to non-blank, then there was probably an error submitting the form,
  # but the other attributes will still be set, so we need to force the collapse of the existing section
  attributes_search = f.object_name.gsub("\]", "").split("[") + [name.to_s + "_attributes"]
  
  Rails.logger.debug{"select_or_create checking whether to force collapse: #{f.object_name}, name: #{name}, model: #{model}, search: #{attributes_search}"}
  
  attributes_found = params.dig(*attributes_search)
  
  Rails.logger.debug{"select_or_create attributes_found: #{Myp.debug_print(attributes_found.to_unsafe_hash)}"}
  
  if !model.attributes_blank?(attributes: attributes_found)
    existingcollapsed = true
  end
end

if defined?(force_existing_collapsed)
  existingcollapsed = force_existing_collapsed
end

Rails.logger.debug{"select_or_create context: #{f.object_name}[#{name}], collapsed: #{collapsed}, existingobj: #{existingobj}, autofocus: #{autofocus}"}
%>
<div data-role="collapsible" data-collapsed="<%= collapsed %>" class="form_container">
  <h4><%= heading %></h4>
  <%# Do not use a collapsibleset because it does not handle nested non-collapsiblesets: <div data-role="collapsible-set"> %>
  <div>
    <% if !only_new %>
      <div data-role="collapsible" data-collapsed="<%= existingcollapsed %>">
        <%= f.fields_for name, existingobj do |sub_fields| %>
          <%
            fieldid = sub_fields.object_name.gsub("\[", "_").gsub("\]", "") + "_id"
          %>
          <h3><%= t("myplaceonline.general.existing") + " " + heading %></h3>
          <div id="<%= random_name %>_searchable_container">
            <ul id="<%= random_name %>_searchable" data-role="listview" data-inset="true" data-filter="true" data-icon="false" data-filter-placeholder="<%= t("myplaceonline.search.placeholder") %>" data-items-per-page="<%= itemsPerPage %>">
              <%
                if existingobj_exists_permanent
                  existingobj_link = existingobjurl
                  if edit
                    existingobj_link = "edit_" + existingobj_link
                  end
              %>
                <li>
                  <%= link_to(existingobj.display, send(existingobj_link, existingobj), onclick: Myp.select_listitem('#' + fieldid)) %>
                  <% if allow_existing_edit %>
                    <%= link_to(existingobj.display, send(existingobj_link, existingobj), :class => "splitlink", data: { icon: edit ? "edit" : "search" }) %>
                  <% end %>
                </li>
              <% end %>
              <% if !existingitems.nil? %>
                <% existingitems.each do |item| %>
                  <%=
                    render partial: 'myplaceonline/list_item', locals: {
                      item: item
                    }
                  %>
                <% end %>
              <% end %>
            </ul>
          </div>
          <%= sub_fields.hidden_field(:id) %>
          <script type="text/javascript">
            myplaceonline.onPageLoad(function() {
              $("#<%= random_name %>_searchable li").each(function(index) {
                $(this).addClass('ui-btn-active');
              });
              myplaceonline.remoteDataListInitialize($("#<%= random_name %>_searchable"), [
                {
                  title: "<%= t("myplaceonline.general.existing") + " " + heading %>",
                  url: "<%= raw(Myp.append_query_parameter(searchurl, "select_or_create", "true")) %>",
                  static_list: true,
                  noresults: <%= noresultsfunc %>
                }
              ], function(ul) {
                ul.find("li > a:not(.splitlink)").each(function(index) {
                  $(this).attr("onclick", "<%= raw(Myp.select_listitem('#' + fieldid)) %>");
                });
                <% if always_search %>
                  myplaceonline.remoteDataListReset(ul, true);
                <% end %>
              });
              <% if autofocus && !collapsed && !existingcollapsed %>
              myplaceonline.maybeFocus($("#<%= random_name %>_searchable_container input"));
              <% end %>
            });
          </script>
        <% end %>
      </div>
    <% end %>
    <% if allow_new %>
      <% if show_new_collapsible %><div id="<%= new_item_collapsible_id %>" data-role="collapsible" data-collapsed="<%= !existingcollapsed %>"><% end %>
        <%
          if existingobj_exists_permanent
            # There's an existing object selected, so don't fill in the form with those attributes but instead create
            # a blank new form for a potentially new object
            existingobj = Myp.new_model(model)
          end
        %>
        <%
        begin
          if ExecutionContext.push_marker(:select_or_create_stack) < 5
        %>
            <%= f.fields_for name, existingobj do |sub_fields| %>
              <% if show_new_collapsible %><h3><%= (edit ? t("myplaceonline.general.replace_with_new") : t("myplaceonline.general.new")) + " " + heading %></h3><% end %>
              <%= render partial: objform + ".html", locals: { f: sub_fields, obj: existingobj, edit: false, autofocus: autofocus, nested: true, simpleform: simpleform } %>
              <%
              if autofocus && !collapsed && existingcollapsed
              %>
                <script type="text/javascript">
                  myplaceonline.onPageLoad(function() {
                    myplaceonline.maybeFocus($("#<%= new_item_collapsible_id %> .autofocus"));
                  });
                </script>
              <% end %>
            <% end %>
        <%
          end
        ensure
          ExecutionContext.pop_marker(:select_or_create_stack)
        end
        %>
      <% if show_new_collapsible %></div><% end %>
    <% end %>
    <% if allow_clear && existingobj_exists_permanent %>
      <div data-role="collapsible" data-collapsed="true">
        <h3><%= t("myplaceonline.general.clear") + " " + heading %></h3>
        <%= f.fields_for name, existingobj do |sub_fields| %>
          <%=
            input_field(
              form: sub_fields,
              name: :_destroy,
              type: Myp::FIELD_BOOLEAN,
              placeholder: t("myplaceonline.general.set_cleared"),
              wrapper_tag: nil,
            )
          %>
        <% end %>
      </div>
    <% end %>
  </div>
</div>
