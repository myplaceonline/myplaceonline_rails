<%# arguments: { f: "form", obj: "object", pictures_field: "symbol", position_field: "symbol", itemname: "string", item_placeholder: "string", heading: "string", addbutton: "string", addbutton_multi: "string", deletebutton: "string", expanded: "boolean" } %>
<%
  if !defined?(useprogress)
    useprogress = true
  end
  if !defined?(allowmultiple)
    allowmultiple = true
  end
  position_field ||= nil
  itemname ||= nil
  item_placeholder ||= "myplaceonline.pictures.picture"
  heading ||= "myplaceonline.pictures.pictures"
  addbutton ||= "myplaceonline.pictures.add_picture"
  addbutton_multi ||= "myplaceonline.pictures.add_pictures"
  deletebutton ||= "myplaceonline.pictures.delete_picture"
  expanded ||= false
  
  fileitem = {
    type: "file",
    name: "identity_file_attributes.file",
    placeholder: t(item_placeholder),
    useprogress: useprogress,
    allowmultiple: allowmultiple,
    multiple_allowed: t("myplaceonline.pictures.multiple_allowed")
  }
  
  if !position_field.nil?
    fileitem["position_field"] = position_field.to_s
  end

  formjson = [fileitem]
  
  # If useprogress is true, then we'll be uploading asynchronously immediately
  # once a file is selected, so it doesn't make sense to show the other fields,
  # since those will be created once the file has uploaded
  if !useprogress
    formjson.push(
      {
        type: "text",
        name: "identity_file_attributes.file_file_name",
        placeholder: t("myplaceonline.files.file_file_name")
      },
      {
        type: "textarea",
        name: "identity_file_attributes.notes",
        placeholder: t("myplaceonline.general.notes")
      }
    )
  end
  
  if !position_field.nil?
    formjson.push({
      type: "position",
      name: position_field.to_s
    })
  end
  
  if current_user.allow_adding_existing_file
    formjson.clear
    formjson.push({
      type: :renderpartial,
      name: :identity_file_attributes,
      partial: "myplaceonline/select_or_create",
      heading: t("myplaceonline.identity_files.file"),
      objform: "files/form",
      existingobjurl: "file_path",
      searchurl: "/files.json?perpage=0&all=true",
      edit: false,
      autofocus: true,
      model_name: "IdentityFile"
    })
  end
%>
<%=
  render layout: "myplaceonline/childproperties", locals: {
    f: f,
    heading: t(heading),
    childpropertiesname: pictures_field,
    childproperties: obj.send(pictures_field.to_s),
    deletebutton: t(deletebutton),
    addbutton: allowmultiple ? t(addbutton_multi) : t(addbutton),
    expanded: obj.send(pictures_field.to_s).length > 0 || expanded,
    position_field: position_field,
    itemname: itemname,
    formjson: formjson
  } do |child_fields, childproperty|
%>
  <%= child_fields.fields_for :identity_file, childproperty.identity_file do |file_fields| %>
    <%
    begin
    %>
      <p><%= image_content(childproperty.identity_file) %></p>
      <%= myp_file_field(file_fields, :file, item_placeholder, childproperty.identity_file.file) %>
      <%= myp_text_field(file_fields, :file_file_name, "myplaceonline.files.file_file_name", childproperty.identity_file.file_file_name) %>
      <%=
        input_field(
          form: file_fields,
          type: Myp::FIELD_TEXT_AREA,
          name: :notes,
          value: childproperty.identity_file.notes,
          placeholder: "myplaceonline.general.notes",
          collapsed: childproperty.identity_file.notes.blank?,
        )
      %>
      <%= myp_hidden_field(file_fields, :_updatetype, AllowExistingConcern::UPDATE_TYPE_COMBINE.to_s) %>
    <%
    rescue Exception => e
    end
    %>
  <% end %>
<% end %>
